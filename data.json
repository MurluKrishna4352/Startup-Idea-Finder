[
    {
        "title": "Sunday Daily Thread: What's everyone working on this week?",
        "url": "https://www.reddit.com/r/Python/comments/1msc4g4/sunday_daily_thread_whats_everyone_working_on/",
        "self_text": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show & Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f",
        "upvote_ratio": 0.88,
        "time_stamp": 1755388831.0,
        "num_comments": 9
    },
    {
        "title": "Tuesday Daily Thread: Advanced questions",
        "url": "https://www.reddit.com/r/Python/comments/1mu2vyt/tuesday_daily_thread_advanced_questions/",
        "self_text": "# Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! \ud83c\udf1f",
        "upvote_ratio": 0.74,
        "time_stamp": 1755561630.0,
        "num_comments": 4
    },
    {
        "title": "My first open-source package: feedunify, a tool for fetching and standardizing data feeds.",
        "url": "https://www.reddit.com/r/Python/comments/1mukriv/my_first_opensource_package_feedunify_a_tool_for/",
        "self_text": "Hey r/Python,\n\nI'm not an expert, but I've been learning a lot and wanted to share my first-ever open-source package. It's called feedunify, and I built it to teach myself about async programming, testing, and the whole process of publishing to PyPI.\n\nWhat My Project Does\n\nfeedunify is a library that fetches and standardizes data from multiple sources. You give it a list of URLs (RSS feeds, YouTube channels, etc), and it returns a single, clean list of Python objects with a predictable structure.\n\n* Fetches data concurrently using asyncio and httpx.\n* Parses RSS, Atom, and standard YouTube channel URLs.\n* Standardizes all data into a clean FeedItem object using pydantic.\n\nTarget Audience\n\n* Developers or hobbyists building simple data aggregation tools (like a news dashboard or a News bot).\n* Anyone who wants to learn about asyncio, pydantic, and Python packaging, as it's a simple, real-world example.\n* It's meant as a learning project, not a production-ready framework.\n\nComparison\n\nThe closest existing tools are powerful parsers like feedparser. feedunify is different because it's a higher-level orchestration tool. It uses feedparser under the hood but adds the layer of:\n\n* Concurrent fetching: Pulls from all sources at once.\n* Source detection: Automatically distinguishes between a normal RSS feed and a YouTube channel.\n* Data standardization: Guarantees a single, consistent output schema.\n\nI would really appreciate any feedback or suggestions you have. Thanks for taking a look!\n\nLinks\n\n* GitHub: [https://github.com/Rudra-K/feedunify](https://github.com/Rudra-K/feedunify)\n* PyPI: [https://pypi.org/project/feedunify/](https://pypi.org/project/feedunify/)",
        "upvote_ratio": 1.0,
        "time_stamp": 1755615352.0,
        "num_comments": 0
    },
    {
        "title": "Swizzle: flexible multi-attribute access in Python",
        "url": "https://www.reddit.com/r/Python/comments/1muhw70/swizzle_flexible_multiattribute_access_in_python/",
        "self_text": "Ever wished you could just do `obj.yxz` and grab all three at once? I got a bit obsessed playing around with `__getattr__` and `__setattr__`, and somehow it turned into a tiny library.\n\n# What my Project Does\n\nSwizzle lets you grab or assign multiple attributes at once, and it works with regular classes, dataclasses, Enums, etc. By default, swizzled attributes return a `swizzledtuple` (like an enhanced `namedtuple`) that keeps the original class name and allows continuous swizzling.\n\n    import swizzle \n    \n    # Example with custom separator\n    @swizzle(sep='_', setter=True)\n    class Person:\n        def __init__(self, name, age, city, country):\n            self.name = name\n            self.age = age\n            self.city = city\n            self.country = country\n    \n    p = Person(\"Jane\", 30, \"Berlin\", \"Germany\")\n    \n    # Get multiple attributes with separator\n    print(p.name_age_city_country)\n    # Person(name='Jane', age=30, city='Berlin', country='Germany')\n    \n    # Continuous swizzling & duplicates\n    print(p.name_age_city_country.city_name_city)\n    # Person(city='Berlin', name='Jane', city='Berlin')\n    \n    # Set multiple attributes at once\n    p.country_city_name_age = \"DE\", \"Munich\", \"Anna\", 25\n    print(p.name_age_city_country)\n    # Person(name='Anna', age=25, city='Munich', country='DE')\n\nUnder the hood:\n\n* Trie-based lookup when attribute names are known/fixed (using the `only_attrs` argument)\n* Greedy matching when names aren\u2019t provided\n* Length-based splitting when all attribute names have the same length\n\nI started writing this while working with bounding box formats like `xywh`, where I had multiple property methods and wanted a faster way to access them without extra overhead.\n\n# Target Audience\n\n* Python developers who work with classes, dataclasses, or Enums and want cleaner, faster attribute access.\n* Data scientists / ML engineers handling structured data objects (like bounding boxes, feature vectors, or nested configs) where repeated attribute access gets verbose.\n* Game developers or graphics programmers who are used to GLSL-style swizzling (`vec.xyz`) and want a Python equivalent.\n* Library authors who want to provide flexible APIs that can accept grouped or chained attribute access.\n\n# Comparison\n\n|Feature|Standard Python|`swizzle`|\n|:-|:-|:-|\n|Access multiple attributes|`obj.a, obj.b, obj.c`|`obj.a_b_c`|\n|Assign multiple attributes|`obj.a = 1; obj.b = 2; obj.c = 3`|`obj.a_b_c = 1, 2, 3`|\n|Namedtuple-like return|\u274c|\u2714 `swizzledtuple`: a namedtuple that supports swizzle access and allows duplicates|\n\nCurious what you think: do you just stick with obj.a, obj.b etc., or could you see this being useful? I\u2019m also toying with a GLSL-like access mode, where attributes are assigned a fixed order, and any new swizzledtuple created through continuous or repeated swizzling preserves this order. Any feature ideas or use cases would be fun to hear!\n\nInstall: `pip install swizzle`\n\nGitHub: [github.com/janthmueller/swizzle](https://github.com/janthmueller/swizzle)",
        "upvote_ratio": 0.5,
        "time_stamp": 1755608770.0,
        "num_comments": 9
    },
    {
        "title": "What is a Python thing you slept on too long?",
        "url": "https://www.reddit.com/r/Python/comments/1mt5hun/what_is_a_python_thing_you_slept_on_too_long/",
        "self_text": "I only recently heard about alternative json libraries like orjson, ujson etc, or even msgspec. There are so many things most of us only learn about if we see it mentioned.\n\nCurious what other tools, libraries, or features you wish you\u2019d discovered earlier?\n\n\n\n",
        "upvote_ratio": 0.97,
        "time_stamp": 1755471895.0,
        "num_comments": 254
    },
    {
        "title": "Substack scraper",
        "url": "https://www.reddit.com/r/Python/comments/1mu9cv8/substack_scraper/",
        "self_text": "[https://github.com/gitgithan/substack\\_scraper](https://github.com/gitgithan/substack_scraper)\n\n**What My Project Does**\n\nScrapes substack articles into html and markdown\n\n**Target Audience**\n\nSubstack Readers\u00a0\n\n**Comparison**\u00a0  \n[https://github.com/timf34/Substack2Markdown](https://github.com/timf34/Substack2Markdown)  \nThis tool tries to automate login with user and pass in a config file.  \nIt also uses user-agent to get around headless problems.\n\nMy code is much less lines (100 vs 500), no config or user pass needed which reduces accidents in leaking passwords.  \nIt requires manually logging in with a headed browser and possibly solving captcha.  \nLogin is a one-time task only before scraper goes through all the articles, and is much more robust to hidden errors.",
        "upvote_ratio": 0.41,
        "time_stamp": 1755580087.0,
        "num_comments": 0
    },
    {
        "title": "UVForge \u2013 Interactive Python project generator using uv package manager (just answer prompts!)",
        "url": "https://www.reddit.com/r/Python/comments/1mugoi2/uvforge_interactive_python_project_generator/",
        "self_text": "# What My Project Does\n\n[UVForge](https://github.com/manursutil/uvforge) is a CLI tool that bootstraps a modern Python project in seconds using uv. Instead of writing config files or copying boilerplate, you just answer a few interactive prompts and UVForge sets up:\n\n* `src/` project layout\n* `pytest` with example tests\n* `ruff` for linting\n* optional Docker and Github Actions support\n* a clean, ready-to-go structure\n\n# Target Audience\n\n* Beginners and Advanced programmers who want to start coding quickly without worrying about setup.\n* Developers who want a **\u201ccreate-react-app\u201d experience** for Python.\n* Anyone who dislikes dealing with templating syntax or YAML files.\n\nIt\u2019s not meant for production frameworks, it is just a quick, friendly way to spin up well-structured Python projects.\n\n# Comparison\n\nThe closest existing tool is **Cookiecutter**, which is very powerful but requires YAML/JSON templates and some upfront configuration. UVForge is different because it is:\n\n* **Fully interactive**: answer prompts in your terminal, no template files needed.\n* **Zero config to start**: works out of the box with modern Python defaults.\n* **Lightweight**: minimal overhead, just install and run.\n\nWould love feedback from the community, especially on what features or integrations you\u2019d like to see added!\n\n**Links**  \nGitHub: [https://github.com/manursutil/uvforge](https://github.com/manursutil/uvforge)",
        "upvote_ratio": 0.4,
        "time_stamp": 1755605611.0,
        "num_comments": 2
    },
    {
        "title": "[Release] Syda \u2013 Open Source Synthetic Data Generator with AI + SQLAlchemy Support",
        "url": "https://www.reddit.com/r/Python/comments/1mu76pd/release_syda_open_source_synthetic_data_generator/",
        "self_text": "I\u2019ve released **Syda**, an open-source Python library for generating **realistic, multi-table synthetic/test data**.\n\nKey features:\n\n* **Referential Integrity** \u2192 no orphaned records (`product.category_id \u2192` [`category.id`](http://category.id) `\u2705`)\n* **SQLAlchemy Native** \u2192 generate synthetic data from your ORM models directly\n* **Multiple Schema Formats** \u2192 YAML, JSON, dicts also supported\n* **Custom Generators** \u2192 define business logic (tax, pricing, rules)\n* **Multi-AI Provider** \u2192 works with OpenAI, Anthropic (Claude), others\n\n\ud83d\udc49 GitHub: [https://github.com/syda-ai/syda](https://github.com/syda-ai/syda)  \n\ud83d\udc49 Docs: [https://python.syda.ai/](https://python.syda.ai/)  \n\ud83d\udc49 PyPI: [https://pypi.org/project/syda/](https://pypi.org/project/syda/)\n\nWould love feedback from Python devs \n\n  \n\n\n",
        "upvote_ratio": 0.53,
        "time_stamp": 1755573274.0,
        "num_comments": 1
    },
    {
        "title": "PyNDS: A Python Wrapper for the Nintendo DS Emulator",
        "url": "https://www.reddit.com/r/Python/comments/1mtiihx/pynds_a_python_wrapper_for_the_nintendo_ds/",
        "self_text": "Source code: [https://github.com/unexploredtest/PyNDS](https://github.com/unexploredtest/PyNDS)\n\n**What My Project Does**\n\nPyNDS is a library that wraps a Nintendo DS emulator, NooDS, using nanobind. It is inspired by PyBoy, allowing you to interact with the emulator through code. (although it's a lot slower than PyBoy). It provides methods to advance frames, insert both joystick and touch input, create save states, and render the game in a window.\n\n**Target Audience**  \nThis project is aimed at developers who want to build bots or reinforcement learning agents. However, it is not ready and may contain some bugs or issues, not to mention the lack of documentation. If there's enough interest, I might polish it\n\n**Comparison**  \nAs far as I have searched, there is no Python library that provides an interface to a Nintendo DS emulator or a Nintendo DS emulator in Python.\n\nFeedback is greatly appreciated.",
        "upvote_ratio": 0.92,
        "time_stamp": 1755513819.0,
        "num_comments": 0
    },
    {
        "title": "Tuitka - A TUI for Nuitka",
        "url": "https://www.reddit.com/r/Python/comments/1mteev1/tuitka_a_tui_for_nuitka/",
        "self_text": "Hi folks, I wanted to share a project I've been working on in my free time -\u00a0**Tuitka**\n\n# What My Project Does\n\nTuitka simplifies the process of compiling Python applications into standalone executables by providing an intuitive TUI instead of wrestling with complex command-line flags.\n\nAdditionally, Tuitka does a few things differently than Nuitka. We will use your requirements.txt, pyproject.toml or PEP 723 metadata, and based on this, we will leverage\u00a0`uv`\u00a0to create a clean environment for your project and run it only with the dependencies that the project might need.\n\n# Target Audience\n\nThis is for Python developers who need to distribute their applications to users who don't have Python installed on their systems.\n\n# Installation & Usage\n\nYou can download it via\u00a0`pip install tuitka`\n\n**Interactive TUI mode:**\n\n    tuitka\n\n  \nSince most people in my experience\u00a0*just*\u00a0want their executables packaged into onefile or standalone, I've decided to allow you to point directly at the file you want to compile:**Direct compilation mode:**\n\n    tuitka my_script.py\n\nThe direct mode automatically uses sensible defaults:\n\n* `--onefile`\u00a0(single executable file)\n* `--assume-yes-for-downloads`\u00a0(auto-downloads plugins)\n* `--remove-output`\u00a0(cleans up build artifacts)\n\n# Why PEP 723 is Preferred\n\nWhen you're working in a development environment, you often accumulate libraries that aren't actually needed by your specific script - things you installed for testing, experimentation, or other projects that might have been left laying around.\n\nNuitka, due to how it works, will try to bundle everything it finds in your dependency list, which can pull in unnecessary bloat and make your executable much larger than it needs to be.\n\n    # /// script\n    # dependencies = [\"requests\", \"rich\"]  # Only what this script uses\n    # ///\n    \n    import requests\n    from rich.console import Console\n    # ... rest of your script\n\nWith PEP 723 inline metadata, you explicitly declare only what that specific script actually needs.\n\nGitHub:\u00a0[https://github.com/Nuitka/Tuitka](https://github.com/Nuitka/Tuitka)",
        "upvote_ratio": 0.91,
        "time_stamp": 1755498755.0,
        "num_comments": 7
    }
]
